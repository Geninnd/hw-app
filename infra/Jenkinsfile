pipeline {
    agent any
    
    environment {
        // Variáveis do projeto
        APP_NAME = 'hw-app'
        DOCKER_REGISTRY = 'localhost:5000'
        
        // Credenciais do GitHub
        GIT_CREDS = credentials('github-credentials')
        // URL do repositório de manifestos (sem https://)
        MANIFESTS_REPO_URL = credentials('manifests-repo-url')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build e Push') {
            steps {
                script {
                    sh """
                        docker build -t ${DOCKER_REGISTRY}/${APP_NAME}:${BUILD_NUMBER} -f infra/Dockerfile .
                        docker push ${DOCKER_REGISTRY}/${APP_NAME}:${BUILD_NUMBER}
                    """
                }
            }
        }

        stage('Update Manifests') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'github-credentials', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                    script {
                        sh """
                            rm -rf hw-k8s
                            git clone https://\${GIT_USERNAME}:\${GIT_PASSWORD}@\${MANIFESTS_REPO_URL} hw-k8s
                            cd hw-k8s/manifests
                            
                            # Atualizar a tag da imagem no deployment
                            sed -i 's|image: .*/${APP_NAME}:.*|image: ${DOCKER_REGISTRY}/${APP_NAME}:${BUILD_NUMBER}|' deployment.yaml
                            
                            # Configurar Git e fazer push das alterações
                            git config --global user.email "jenkins@local.dev"
                            git config --global user.name "Jenkins CI"
                            git add deployment.yaml
                            git diff-index --quiet HEAD || (git commit -m "Update ${APP_NAME} image to ${BUILD_NUMBER}" && git push origin main)
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            node {
                cleanWs()
            }
        }
        success {
            echo "Pipeline concluída com sucesso! Nova versão: ${BUILD_NUMBER}"
        }
        failure {
            echo "Pipeline falhou! Verifique os logs para mais detalhes."
        }
    }
} 
